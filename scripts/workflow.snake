#######################################
#
# Snakemake workflow analyze genomes
#
# How to run:
#
# conda create -n cfDNA_project -y snakemake snakemake-executor-plugin-slurm numpy
# conda activate cfDNA_project
# snakemake -s workflow.snake --executor slurm -j 0 --use-conda --default-resources slurm_account=Fragmentomics
#
#######################################
import glob
import yaml

with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

INPUT_DIR = config['input_dir']
INPUT_DHS_DIR = config['input_dhs_dir']
RESULT_DIR = config['result_dir']
RESULT_SORTED_DIR = config['result_sorted_dir']
MATRIX_COLUMNS = config['matrix_columns']

SAMPLES = [f.split('/')[-1].replace('.hg38.frag.gz', '') for f in glob.glob(f"{INPUT_DIR}*.hg38.frag.gz", recursive=True)]

rule all:
    input:
        f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed",
        f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted_wl{MATRIX_COLUMNS}.bed",
        expand(f"{RESULT_SORTED_DIR}{{sample}}_sorted.hg38.frag.gz", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy", sample=SAMPLES),
        
        # L-WPS
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.npy", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.png", sample=SAMPLES),
        
        # FDI
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fdi.npz", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fdi.png", sample=SAMPLES),
        
        # IFS
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_ifs.npz", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_ifs.png", sample=SAMPLES),

        # PFE
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_pfe.npz", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_pfe.png", sample=SAMPLES),
        
        # General visualization
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.coverage_plot.png", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.fragment_lengths_plot.png", sample=SAMPLES),
        
rule check_dhs_data_sorting:
    input:
        dhs=f"{INPUT_DHS_DIR}Lymphoid_DHS.bed"
    output:
        dhs_sorted=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed"
    shell:
        '''
        if cat {input.dhs} | awk -F'\t' '{{if(NR>1 && prev > $2 && $1 == prev_chr) {{print "PROBLEM"; exit 1}}; prev=$2; prev_chr=$1}}'; then
            # the file is sorted, only create the symlink
            ln -s $(realpath {input.dhs}) {output.dhs_sorted}
        else
            # the file isn't sorted, so we need to sort it by chr (with -V) and start position (with -n) and then gzip back
            sort -k1,1V -k2,2n {input.dhs} > {output.dhs_sorted}
        fi
        '''
        
rule preprocess_dhs_sorted_data:
    input:
        dhs_sorted=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed"
    output:
        dhs_sorted_preprocessed=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted_wl{MATRIX_COLUMNS}.bed"
    script:
        "preprocess_dhs.py"
        
rule check_fragments_data_sorting:
    input:
        fragment=f"{INPUT_DIR}{{sample}}.hg38.frag.gz",
    output:
        fragment_sorted=f"{RESULT_SORTED_DIR}{{sample}}_sorted.hg38.frag.gz"
    shell:
        '''
        if zcat {input.fragment} | awk -F'\t' '{{if(NR>1 && prev > $2 && $1 == prev_chr) {{print "PROBLEM"; exit 1}}; prev=$2; prev_chr=$1}}'; then
            # the file is sorted, only create the symlink
            ln -s $(realpath {input.fragment}) {output.fragment_sorted}
        else
            # the file isn't sorted, so we need to sort it by chr (with -V) and start position (with -n) and then gzip back
            zcat {input.fragment} | sort -k1,1V -k2,2n | gzip -c > {output.fragment_sorted}
        fi
        '''

rule preprocess_fragments:
    input:
        fragment=f"{RESULT_SORTED_DIR}{{sample}}_sorted.hg38.frag.gz",
        #dhs=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed"
        dhs=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted_wl{MATRIX_COLUMNS}.bed"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy"
    script:
        "preprocess_fragments.py"
        
# LWPS calculation
rule calculate_lwps:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.npy"
    params:
        statistic="lwps"
    script:
        "calculate_statistics.py"

# FDI calculation
rule calculate_fdi:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fdi.npz"
    params:
        statistic="fdi"
    script:
        "calculate_statistics.py"
        
# IFS calculation
rule calculate_ifs:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_ifs.npz"
    params:
        statistic="ifs"
    script:
        "calculate_statistics.py"

# PFE calculation
rule calculate_pfe:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_pfe.npz"
    params:
        statistic="pfe"
    script:
        "calculate_statistics.py"
        
# L-WPS visualization
rule visualize_lwps:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        statistic=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.npy",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.png"
    params:
        statistic="lwps",
        sample="{sample}"
    script:
        "visualize_statistics.py"

# FDI visualization
rule visualize_fdi:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        statistic=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fdi.npz",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fdi.png"
    params:
        statistic="fdi",
        sample="{sample}"
    script:
        "visualize_statistics.py"
        
# IFS visualization
rule visualize_ifs:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        statistic=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_ifs.npz",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_ifs.png"
    params:
        statistic="ifs",
        sample="{sample}"
    script:
        "visualize_statistics.py"

# PFE visualization
rule visualize_pfe:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        statistic=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_pfe.npz",
        config="config.yaml"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_pfe.png"
    params:
        statistic="pfe",
        sample="{sample}"
    script:
        "visualize_statistics.py"
        
# General visualization
rule visualize_matrix:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        config="config.yaml"
    output:
        coverage_plot=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.coverage_plot.png",
        fragment_lengths_plot=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.fragment_lengths_plot.png",
    script:
        "visualize_matrix.py"