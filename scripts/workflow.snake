#######################################
#
# Snakemake workflow analyze genomes
#
# How to run:
#
# conda create -n cfDNA_project -y snakemake snakemake-executor-plugin-slurm numpy
# conda activate cfDNA_project
# snakemake -s workflow.snake --executor slurm -j 0 --use-conda --default-resources slurm_account=Fragmentomics
#
#######################################
import glob

from constants import (
    INPUT_DIR, INPUT_DHS_DIR, 
    RESULT_DIR, RESULT_SORTED_DIR,
    MATRIX_COLUMNS
)


SAMPLES = [f.split('/')[-1].replace('.hg38.frag.gz', '') for f in glob.glob(f"{INPUT_DIR}*.hg38.frag.gz", recursive=True)]

rule all:
    input:
        f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed",
        f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted_wl{MATRIX_COLUMNS}.bed",
        expand(f"{RESULT_SORTED_DIR}{{sample}}_sorted.hg38.frag.gz", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy", sample=SAMPLES),
        #expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.npy", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_coverage.png", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fragment_lengths_distribution.png", sample=SAMPLES),
        expand(f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.png", sample=SAMPLES),
        
rule check_dhs_data_sorting:
    input:
        dhs=f"{INPUT_DHS_DIR}Lymphoid_DHS.bed"
    output:
        dhs_sorted=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed"
    shell:
        '''
        if cat {input.dhs} | awk -F'\t' '{{if(NR>1 && prev > $2 && $1 == prev_chr) {{print "PROBLEM"; exit 1}}; prev=$2; prev_chr=$1}}'; then
            # the file is sorted, only create the symlink
            ln -s $(realpath {input.dhs}) {output.dhs_sorted}
        else
            # the file isn't sorted, so we need to sort it by chr (with -V) and start position (with -n) and then gzip back
            sort -k1,1V -k2,2n {input.dhs} > {output.dhs_sorted}
        fi
        '''
        
rule preprocess_dhs_sorted_data:
    input:
        dhs_sorted=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed"
    output:
        dhs_sorted_preprocessed=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted_wl{MATRIX_COLUMNS}.bed"
    script:
        "preprocess_dhs.py"
        
rule check_fragments_data_sorting:
    input:
        fragment=f"{INPUT_DIR}{{sample}}.hg38.frag.gz",
    output:
        fragment_sorted=f"{RESULT_SORTED_DIR}{{sample}}_sorted.hg38.frag.gz"
    shell:
        '''
        if zcat {input.fragment} | awk -F'\t' '{{if(NR>1 && prev > $2 && $1 == prev_chr) {{print "PROBLEM"; exit 1}}; prev=$2; prev_chr=$1}}'; then
            # the file is sorted, only create the symlink
            ln -s $(realpath {input.fragment}) {output.fragment_sorted}
        else
            # the file isn't sorted, so we need to sort it by chr (with -V) and start position (with -n) and then gzip back
            zcat {input.fragment} | sort -k1,1V -k2,2n | gzip -c > {output.fragment_sorted}
        fi
        '''

rule preprocess_fragments:
    input:
        fragment=f"{RESULT_SORTED_DIR}{{sample}}_sorted.hg38.frag.gz",
        #dhs=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted.bed"
        dhs=f"{RESULT_SORTED_DIR}Lymphoid_DHS_sorted_wl{MATRIX_COLUMNS}.bed"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy"
    script:
        "preprocess_fragments.py"
        
rule calculate_test_statistics:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy"
    output:
        f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.npy"
    script:
        "calculate_test_statistics.py"
        
rule visualize_matrix:
    input:
        matrix=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted.npy",
        lwps=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.npy"
    output:
        coverage_plot=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_coverage.png",
        fragment_lengths_plot=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_fragment_lengths_distribution.png",
        lwps_plot=f"{RESULT_DIR}{{sample}}__Lymphoid_DHS_sorted_lwps.png",
    script:
        "visualize_matrix.py"